require('dotenv').config(); // –ø–æ–¥–∫–ª—é—á–∏–ª–∏ NPM dotenv
const { Telegraf } = require('telegraf'); // –ø–æ–¥–∫–ª—é—á–∏–ª–∏ API Telegram
const fetch = require('node-fetch'); // –ø–æ–¥–∫–ª—é—á–∏–ª–∏ NPM –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ fetch –≤ Node.js
const express = require('express');

const app = express();
const PORT = 3003;

app.listen(PORT, () => {
  console.log('Server started on port ', PORT);
});

const bot = new Telegraf(process.env.BOT_TOKEN); // —É–∫–∞–∑–∞–ª —Ç–æ–∫–µ–Ω –º–æ–µ–≥–æ –±–æ—Ç–∞
bot.start((ctx) => {
  ctx.reply(`üëÆ‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ${ctx.from.first_name}, \n–æ—Ç–ø—Ä–∞–≤—å URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ http://–∫–∞–∫–æ–π—Ç–æ—Å–∞–π—Ç.com`),
    ctx.replyWithVideo({
      url: 'https://i.pinimg.com/originals/78/08/12/7808128339ecb0fca5ecf8aed56cdb0f.gif',
    });
}); // –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

// –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.on('message', async (ctx) => {
  let url = ctx.message.text; // –ø–µ—Ä–µ–º–µ–Ω–∞—è —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
  console.log(url);

  try {
    let ftch = await fetch(`http://htmlweb.ru/analiz/api.php?bl&url=${url}&json`);
    let result = await ftch.json();
    console.log(result);

    // —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
    async function check() {
      if (result.comment) {
        let res = result.comment;
        ctx.reply('‚õî–ü–õ–û–•–û–ô –†–ï–ô–¢–ò–ù–ì‚õî');
        ctx.reply(`${res}`);
        ctx.replyWithVideo({
          url:
            'https://media1.tenor.com/images/eddd0f4ceaf26a1ceaf537a114ae6b90/tenor.gif?itemid=11732713',
        });
      } else {
        ctx.reply('‚úÖ–†–ï–ô–¢–ò–ù–ì –•–û–†–û–®–ò–ô‚úÖ');
        ctx.replyWithVideo({
          url:
            'https://images6.fanpop.com/image/photos/39100000/The-Simpsons-gifs-the-simpsons-39124943-320-240.gif',
        });
      }
    }
    check();

    let ftch2 = await fetch(
      `https://sba.yandex.net/v4/threatMatches:find?key=${process.env.API_KEY}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          client: {
            clientId: `${ctx.from.first_name}`,
            clientVersion: '{1.1.1}',
          },
          threatInfo: {
            threatTypes: [
              // —Ç–∏–ø—ã —É–≥—Ä–æ–∑
              'THREAT_TYPE_UNSPECIFIED',
              'MALWARE',
              'SOCIAL_ENGINEERING',
              'UNWANTED_SOFTWARE',
              'POTENTIALLY_HARMFUL_APPLICATION',
            ],
            platformTypes: ['ALL_PLATFORMS'], // –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            threatEntryTypes: ['THREAT_ENTRY_TYPE_UNSPECIFIED', 'URL', 'EXECUTABLE'], // —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–≥—Ä–æ–∑—É
            threatEntries: [{ url: `${url}` }], // URL –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ–º
          },
        }),
      }
    );

    // —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
    async function check2() {
      try {
        let site = await ftch2.json();
        let result = Object.values(site).flat(2)[0].threatType;
        ctx.reply('üî¥‚ò£Ô∏è–ù–ê –°–ê–ô–¢–ï –ï–°–¢–¨ –ö–ò–ë–£–†–£–ì–†–û–ó–ê‚ò£Ô∏èüî¥');
      } catch {
        ctx.reply('üü¢–ù–ê –°–¢–†–ê–ù–ò–¶–ï –ù–ï–¢ –ö–ò–ë–ï–†–£–ì–†–û–óüü¢');
      }
    }
    check2();
  } catch {
    ctx.reply('–ù–ï –ú–ê–†–ê–°–ò –ë–†–ê–¢–ê–ù, \n –ì–¥–µ –ø—Ä–æ—Ç–æ–∫–æ–ª HTTP?');
    ctx.replyWithVideo({
      url: 'https://i.gifer.com/origin/8c/8c6d49a83f7d2d9b7eef336178c6bad2_w200.gif',
    });
  }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
